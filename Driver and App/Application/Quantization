#include "common.h"

void Quantize3D_uniform(const float3D &IFM, float3D_Q &OFM_Q, int w, int f)
{
    num_t quantizer(w, f);
    for(int x = 0; x < (int)IFM.size(); x++)
    {
        for(int y = 0; y < (int)IFM[0].size(); y++)
        {
            for(int c = 0; c < (int)IFM[0][0].size(); c++)
            {
                quantizer = IFM[x][y][c];
                OFM_Q[x][y][c] = quantizer;
            }
        }
    }
};

void Quantize4D_uniform(const float4D &W, float4D_Q &W_Q, int w, int f)
{
    num_t quantizer(w, f);
    for(int x = 0; x < (int)W.size(); x++)
    {
        for(int y = 0; y < (int)W[0].size(); y++)
        {
            for(int z = 0; z < (int)W[0][0].size(); z++)
            {
                for(int u = 0; u < (int)W[0][0][0].size(); u++)
                {
                    quantizer = W[x][y][z][u];
                    W_Q[x][y][z][u] = quantizer;
                }
            }
        }
    }
};

void Quantized1D_uniform(const std :: vector<t> &b, std :: vector<num_t> &b_q, int w, int f)
{
    num_t quantizer(w, f);
    for(int x = 0; x < (int)b.size(); x++)
    {
        quantizer = b[x];
        b_q.push_back(quantizer);
    }
};

double PSNR(const float3D &Original, const float3D_Q &Quantized)
{
    double psnr = 0;

    for(int x = 0; x < (int)Original.size(); x++)
    {
        for(int y = 0; y < (int)Original[0].size(); y++)
        {
            for(int c = 0; c < (int)Original[0][0].size(); c++)
            {
                psnr += pow(Original[x][y][c] - Quantized[x][y][c], 2.0);
            }
        }
    }

    psnr /= Original.size() * Original[0].size() * Original[0][0].size();
    psnr = 20 * log10(255.0) - 10 * log10(psnr);

    return psnr;
};
